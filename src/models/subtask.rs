/*
 * Golem Gateway API
 *
 * Golem Brass Gateway API for Golem Unlimited
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Subtask : Subtask is a part of task supossed to be executed by a provider, which submited task computation willingness.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Subtask {
    #[serde(rename = "taskId")]
    task_id: String,
    #[serde(rename = "subtaskId")]
    subtask_id: String,
    /// total subtask price in 10e-18 GNT computed as `task_max_price * subtask_timeout`
    #[serde(rename = "price")]
    price: i64,
    /// timestamp when computation must be finished to be accepted by a requestor
    #[serde(rename = "deadline")]
    deadline: i32,
    #[serde(rename = "dockerImages")]
    docker_images: Option<Vec<::models::SubtaskDockerImages>>,

    #[serde(rename = "extraData")]
    extra_data: serde_json::Value,
}

impl Subtask {
    /// Subtask is a part of task supossed to be executed by a provider, which submited task computation willingness.
    pub fn new(task_id: String, subtask_id: String, price: i64, deadline: i32) -> Subtask {
        Subtask {
            task_id: task_id,
            subtask_id: subtask_id,
            price: price,
            deadline: deadline,
            docker_images: None,
        }
    }

    pub fn set_task_id(&mut self, task_id: String) {
        self.task_id = task_id;
    }

    pub fn with_task_id(mut self, task_id: String) -> Subtask {
        self.task_id = task_id;
        self
    }

    pub fn task_id(&self) -> &String {
        &self.task_id
    }

    pub fn set_subtask_id(&mut self, subtask_id: String) {
        self.subtask_id = subtask_id;
    }

    pub fn with_subtask_id(mut self, subtask_id: String) -> Subtask {
        self.subtask_id = subtask_id;
        self
    }

    pub fn subtask_id(&self) -> &String {
        &self.subtask_id
    }

    pub fn set_price(&mut self, price: i64) {
        self.price = price;
    }

    pub fn with_price(mut self, price: i64) -> Subtask {
        self.price = price;
        self
    }

    pub fn price(&self) -> &i64 {
        &self.price
    }

    pub fn set_deadline(&mut self, deadline: i32) {
        self.deadline = deadline;
    }

    pub fn with_deadline(mut self, deadline: i32) -> Subtask {
        self.deadline = deadline;
        self
    }

    pub fn deadline(&self) -> &i32 {
        &self.deadline
    }

    pub fn set_docker_images(&mut self, docker_images: Vec<::models::SubtaskDockerImages>) {
        self.docker_images = Some(docker_images);
    }

    pub fn with_docker_images(
        mut self,
        docker_images: Vec<::models::SubtaskDockerImages>,
    ) -> Subtask {
        self.docker_images = Some(docker_images);
        self
    }

    pub fn docker_images(&self) -> Option<&Vec<::models::SubtaskDockerImages>> {
        self.docker_images.as_ref()
    }

    pub fn reset_docker_images(&mut self) {
        self.docker_images = None;
    }
}
