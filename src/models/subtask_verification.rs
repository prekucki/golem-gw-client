/*
 * Golem Gateway API
 *
 * Golem Brass Gateway API for Golem Unlimited
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// SubtaskVerification : Subtask verification result

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SubtaskVerification {
    #[serde(rename = "taskId")]
    task_id: String,
    #[serde(rename = "subtaskId")]
    subtask_id: String,
    #[serde(rename = "verificationResult")]
    verification_result: String,
    #[serde(rename = "paymentTs")]
    payment_ts: Option<i32>,
    #[serde(rename = "reason")]
    reason: Option<String>,
}

impl SubtaskVerification {
    /// Subtask verification result
    pub fn new(
        task_id: String,
        subtask_id: String,
        verification_result: String,
    ) -> SubtaskVerification {
        SubtaskVerification {
            task_id: task_id,
            subtask_id: subtask_id,
            verification_result: verification_result,
            payment_ts: None,
            reason: None,
        }
    }

    pub fn set_task_id(&mut self, task_id: String) {
        self.task_id = task_id;
    }

    pub fn with_task_id(mut self, task_id: String) -> SubtaskVerification {
        self.task_id = task_id;
        self
    }

    pub fn task_id(&self) -> &String {
        &self.task_id
    }

    pub fn set_subtask_id(&mut self, subtask_id: String) {
        self.subtask_id = subtask_id;
    }

    pub fn with_subtask_id(mut self, subtask_id: String) -> SubtaskVerification {
        self.subtask_id = subtask_id;
        self
    }

    pub fn subtask_id(&self) -> &String {
        &self.subtask_id
    }

    pub fn set_verification_result(&mut self, verification_result: String) {
        self.verification_result = verification_result;
    }

    pub fn with_verification_result(mut self, verification_result: String) -> SubtaskVerification {
        self.verification_result = verification_result;
        self
    }

    pub fn verification_result(&self) -> &String {
        &self.verification_result
    }

    pub fn set_payment_ts(&mut self, payment_ts: i32) {
        self.payment_ts = Some(payment_ts);
    }

    pub fn with_payment_ts(mut self, payment_ts: i32) -> SubtaskVerification {
        self.payment_ts = Some(payment_ts);
        self
    }

    pub fn payment_ts(&self) -> Option<&i32> {
        self.payment_ts.as_ref()
    }

    pub fn reset_payment_ts(&mut self) {
        self.payment_ts = None;
    }

    pub fn set_reason(&mut self, reason: String) {
        self.reason = Some(reason);
    }

    pub fn with_reason(mut self, reason: String) -> SubtaskVerification {
        self.reason = Some(reason);
        self
    }

    pub fn reason(&self) -> Option<&String> {
        self.reason.as_ref()
    }

    pub fn reset_reason(&mut self) {
        self.reason = None;
    }
}
