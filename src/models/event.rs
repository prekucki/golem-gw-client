/* 
 * Golem Gateway API
 *
 * Golem Brass Gateway API for Golem Unlimited
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Event : Every item has id and exactly one of remaining fields filled.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Event {
  #[serde(rename = "eventId")]
  event_id: i64,
  #[serde(rename = "task")]
  task: Option<::models::Task>,
  #[serde(rename = "subtask")]
  subtask: Option<::models::Subtask>,
  #[serde(rename = "resource")]
  resource: Option<::models::Resource>,
  #[serde(rename = "subtaskVerification")]
  subtask_verification: Option<::models::SubtaskVerification>
}

impl Event {
  /// Every item has id and exactly one of remaining fields filled.
  pub fn new(event_id: i64) -> Event {
    Event {
      event_id: event_id,
      task: None,
      subtask: None,
      resource: None,
      subtask_verification: None
    }
  }

  pub fn set_event_id(&mut self, event_id: i64) {
    self.event_id = event_id;
  }

  pub fn with_event_id(mut self, event_id: i64) -> Event {
    self.event_id = event_id;
    self
  }

  pub fn event_id(&self) -> &i64 {
    &self.event_id
  }


  pub fn set_task(&mut self, task: ::models::Task) {
    self.task = Some(task);
  }

  pub fn with_task(mut self, task: ::models::Task) -> Event {
    self.task = Some(task);
    self
  }

  pub fn task(&self) -> Option<&::models::Task> {
    self.task.as_ref()
  }

  pub fn reset_task(&mut self) {
    self.task = None;
  }

  pub fn set_subtask(&mut self, subtask: ::models::Subtask) {
    self.subtask = Some(subtask);
  }

  pub fn with_subtask(mut self, subtask: ::models::Subtask) -> Event {
    self.subtask = Some(subtask);
    self
  }

  pub fn subtask(&self) -> Option<&::models::Subtask> {
    self.subtask.as_ref()
  }

  pub fn reset_subtask(&mut self) {
    self.subtask = None;
  }

  pub fn set_resource(&mut self, resource: ::models::Resource) {
    self.resource = Some(resource);
  }

  pub fn with_resource(mut self, resource: ::models::Resource) -> Event {
    self.resource = Some(resource);
    self
  }

  pub fn resource(&self) -> Option<&::models::Resource> {
    self.resource.as_ref()
  }

  pub fn reset_resource(&mut self) {
    self.resource = None;
  }

  pub fn set_subtask_verification(&mut self, subtask_verification: ::models::SubtaskVerification) {
    self.subtask_verification = Some(subtask_verification);
  }

  pub fn with_subtask_verification(mut self, subtask_verification: ::models::SubtaskVerification) -> Event {
    self.subtask_verification = Some(subtask_verification);
    self
  }

  pub fn subtask_verification(&self) -> Option<&::models::SubtaskVerification> {
    self.subtask_verification.as_ref()
  }

  pub fn reset_subtask_verification(&mut self) {
    self.subtask_verification = None;
  }

}



